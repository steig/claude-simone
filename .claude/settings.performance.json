{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Read(**/*.md)",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] Pre-read cache check for $TOOL_ARGS\" >> .simone/.cache/read_log.txt"
          }
        ]
      },
      {
        "matcher": "Glob(**/*template*)",
        "hooks": [
          {
            "type": "command", 
            "command": "mkdir -p .simone/.cache && echo \"[$(date '+%H:%M:%S')] Template access: $TOOL_ARGS\" >> .simone/.cache/template_log.txt"
          }
        ]
      },
      {
        "matcher": "Bash(git *)",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] Git operation started: $TOOL_ARGS\" >> .simone/.cache/git_log.txt"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write(**/*.md)",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] File written, checking for auto-format...\" && if command -v markdownlint &> /dev/null; then markdownlint --fix \"$TOOL_FILE_PATH\" 2>/dev/null || true; fi"
          }
        ]
      },
      {
        "matcher": "Edit(**/*.md)",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] File edited: $TOOL_FILE_PATH\" >> .simone/.cache/edit_log.txt"
          }
        ]
      },
      {
        "matcher": "Bash(git add *)",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] Auto-staging completed\" && git status --porcelain | wc -l | xargs echo \"Files staged:\" >> .simone/.cache/git_stats.txt"
          }
        ]
      },
      {
        "matcher": "Bash(git commit *)",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] Commit completed. Running post-commit optimizations...\" && git log --oneline -1 >> .simone/.cache/commit_log.txt"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] Performance checkpoint - checking system resources\" && ps -o pid,pcpu,pmem,command -p $$ >> .simone/.cache/resource_log.txt"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] Session completed. Generating performance summary...\" && if [ -f .simone/.cache/git_log.txt ]; then echo \"Git operations: $(wc -l < .simone/.cache/git_log.txt)\"; fi"
          },
          {
            "type": "command",
            "command": "mkdir -p .simone/.cache && find .simone/.cache -name \"*.txt\" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print \"Total logged operations:\", $1}' || echo \"Performance logging initialized\""
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] Subagent completed. Parallel task coordination check...\" >> .simone/.cache/subagent_log.txt"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date '+%H:%M:%S')] Context compaction starting. Preserving performance cache...\" && mkdir -p .simone/.cache/backup && cp .simone/.cache/*.txt .simone/.cache/backup/ 2>/dev/null || echo \"Cache backup completed\""
          }
        ]
      }
    ]
  },
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(tree:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(chmod:*)",
      "Bash(git:*)",
      "Bash(echo:*)",
      "Bash(cat:*)",
      "Bash(wc:*)",
      "Bash(ps:*)",
      "Bash(date:*)",
      "Bash(markdownlint:*)",
      "Bash(pre-commit:*)",
      "Bash(./install-simone.sh:*)",
      "Bash(./scripts/*)",
      "Bash(./.simone/scripts/*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude mcp:*)",
      "mcp__deepwiki__*",
      "mcp__ide__*"
    ],
    "deny": [
      "Bash(rm -rf /*)",
      "Bash(sudo:*)",
      "Bash(su:*)"
    ]
  },
  "parallelTasksCount": 3,
  "maxTokens": 8192,
  "temperature": 0.1,
  "timeout": 300000
}